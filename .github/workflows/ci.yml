name: ci

on:
  pull_request:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  test:
    name: test
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.rust == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: beta
            os: ubuntu-latest
            rust: beta
          - build: nightly
            os: ubuntu-latest
            rust: nightly
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows-msvc
            os: windows-latest
            rust: stable
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --verbose

      - name: Build release
        if: matrix.build == 'stable'
        run: cargo build --verbose --release

      - name: Run tests
        run: cargo test --verbose

      - name: Test comment/uncomment functionality
        if: matrix.build == 'stable'
        run: |
          # Build release binary
          cargo build --release

          # Test C multiline comment/uncomment
          echo "Testing C file..."
          cp sample/c/test_multiline.c /tmp/test_c.c

          # Test commenting
          echo "y" | ./target/release/flop on /tmp/test_c.c -y
          if ! diff -q /tmp/test_c.c sample/c/test_multiline_commented.c; then
            echo "Failed: Commented C file doesn't match expected output"
            diff /tmp/test_c.c sample/c/test_multiline_commented.c
            exit 1
          fi

          # Test uncommenting
          echo "y" | ./target/release/flop off /tmp/test_c.c -y
          if ! diff -q /tmp/test_c.c sample/c/test_multiline.c; then
            echo "Failed: Uncommented C file doesn't match original"
            diff /tmp/test_c.c sample/c/test_multiline.c
            exit 1
          fi

          # Test C++ multiline comment/uncomment
          echo "Testing C++ file..."
          cp sample/cpp/test_multiline.cpp /tmp/test_cpp.cpp

          # Test commenting
          echo "y" | ./target/release/flop on /tmp/test_cpp.cpp -y
          if ! diff -q /tmp/test_cpp.cpp sample/cpp/test_multiline_commented.cpp; then
            echo "Failed: Commented C++ file doesn't match expected output"
            diff /tmp/test_cpp.cpp sample/cpp/test_multiline_commented.cpp
            exit 1
          fi

          # Test uncommenting
          echo "y" | ./target/release/flop off /tmp/test_cpp.cpp -y
          if ! diff -q /tmp/test_cpp.cpp sample/cpp/test_multiline.cpp; then
            echo "Failed: Uncommented C++ file doesn't match original"
            diff /tmp/test_cpp.cpp sample/cpp/test_multiline.cpp
            exit 1
          fi

          echo "All tests passed!"

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
